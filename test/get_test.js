// Generated by CoffeeScript 1.8.0
(function() {
  var Mojio, MojioClient, Trip, Vehicle, assert, config, mojio_client, should, testObject, testdata;

  MojioClient = require('../lib/nodejs/MojioClient');

  Vehicle = require('../lib/models/Vehicle');

  Trip = require('../lib/models/Trip');

  Mojio = require('../lib/models/Mojio');

  config = require('./config/mojio-config.coffee');

  config.application = '6457d3dc-32f1-4f47-b030-211bc5544533';

  config.secret = '35bf63e7-4443-4883-8d46-1e9195dec800';

  config.live = false;

  mojio_client = new MojioClient(config);

  assert = require('assert');

  testdata = require('./data/mojio-test-data');

  should = require('should');

  testObject = null;

  testdata.username = 'anonymous';

  testdata.password = 'Password007';

  describe('Vehicle', function() {
    before(function(done) {
      return mojio_client.login(testdata.username, testdata.password, function(error, result) {
        (error === null).should.be["true"];
        mojio_client.getCurrentUser(function(error, result) {
          return (error === null).should.be["true"];
        });
        return done();
      });
    });
    return it('can get Vehicles and get a vehicle by id and criteria', function(done) {
      return mojio_client.get(Vehicle, {}, function(error, result) {
        var instance, vehicle, _i, _len, _ref;
        (error === null).should.be["true"];
        mojio_client.should.be.an.instanceOf(MojioClient);
        result.Objects.should.be.an.instanceOf(Array);
        _ref = result.Objects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          instance = _ref[_i];
          instance.should.be.an.instanceOf(Vehicle);
        }
        vehicle = result.Objects[0];
        return mojio_client.get(Vehicle, "f7fd11ba-3a0a-4f8c-9a21-08c5605ca718", function(error, result) {
          result.should.be.an.instanceOf(Vehicle);
          return mojio_client.get(Trip, {
            criteria: {
              VehicleId: result.id()
            }
          }, function(error, result) {
            var _j, _len1, _ref1;
            result.Objects.should.be.an.instanceOf(Array);
            _ref1 = result.Objects;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              instance = _ref1[_j];
              instance.should.be.an.instanceOf(Trip);
            }
            return done();
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=get_test.js.map
