// Generated by CoffeeScript 1.8.0
(function() {
  var App, Event, Mojio, MojioClient, Observer, Vehicle, app1, app2, assert, config, count, mojio_client, observer, should, testdata, theevent, vehicle;

  MojioClient = require('../lib/nodejs/MojioClient');

  Observer = require('../lib/models/Observer');

  App = require('../lib/models/App');

  Mojio = require('../lib/models/Mojio');

  Vehicle = require('../lib/models/Vehicle');

  Event = require('../lib/models/Event');

  config = require('./config/mojio-config.coffee');

  mojio_client = new MojioClient(config);

  assert = require('assert');

  testdata = require('./data/mojio-test-data');

  should = require('should');

  count = [0, 0];

  app1 = null;

  app2 = null;

  observer = null;

  theevent = null;

  vehicle = null;

  describe('Observer', function() {
    before(function(done) {
      return mojio_client.login(testdata.username, testdata.password, function(error, result) {
        (error === null).should.be["true"];
        return done();
      });
    });
    it('can Observe Newly Created Object', function(done) {
      var app;
      app = new App().mock();
      return mojio_client.post(app, function(error, result) {
        (error === null).should.be["true"];
        app = new App(result);
        console.log("created app");
        return mojio_client.observe(app, null, function(entity) {
          entity.should.be.an.instanceOf(Object);
          console.log("Observed change seen.");
          return mojio_client.unobserve(observer, app, null, null, function(error, result) {
            return mojio_client["delete"](app, function(error, result) {
              (error === null).should.be["true"];
              console.log("App deleted.");
              return done();
            });
          });
        }, function(error, result) {
          result.Status.should.equal("Approved");
          app.Description = "Changed";
          console.log("changing app...");
          result.should.be.an.instanceOf(Observer);
          observer = result;
          return mojio_client.put(app, function(error, result) {
            (error === null).should.be["true"];
            return console.log("App changed.");
          });
        });
      });
    });
    it('can Observe Events of Vehicle', function(done) {
      var mojio;
      mojio = new Mojio().mock();
      return mojio_client.create(mojio, function(error, result) {
        (error === null).should.be["true"];
        mojio = new Mojio(result);
        vehicle = new Vehicle().mock();
        vehicle.MojioId = mojio.id();
        return mojio_client.create(vehicle, function(error, result) {
          (error === null).should.be["true"];
          vehicle = new Vehicle(result);
          console.log("created vehicle");
          theevent = null;
          return mojio_client.observe(Event, vehicle, (function(_this) {
            return function(entity) {
              entity.should.be.an.instanceOf(Object);
              console.log("Observed change seen.");
              if (entity.Type === 'Vehicle') {
                return console.log("Vehicle Changed");
              } else {
                console.log("Event Added to Vehicle.");
                return mojio_client.unobserve(observer, Event, vehicle, null, function(error, result) {
                  return mojio_client["delete"](theevent, function(error, result) {
                    (error === null).should.be["true"];
                    console.log("Event deleted.");
                    return mojio_client["delete"](vehicle, function(error, result) {
                      (error === null).should.be["true"];
                      console.log("Vehicle deleted.");
                      return done();
                    });
                  });
                });
              }
            };
          })(this), (function(_this) {
            return function(error, result) {
              var event;
              result.should.be.an.instanceOf(Observer);
              observer = result;
              event = new Event().mock();
              event.Type = 'Event';
              event.EventType = 'TripEvent';
              event.VehicleId = vehicle.id();
              event.MojioId = mojio.id();
              event.Time = new Date();
              event.Location = {
                Lat: 49.8,
                Lng: 112.0
              };
              console.log("creating event");
              return mojio_client.create(event, function(error, result) {
                theevent = new Event(result);
                (error === null).should.be["true"];
                return console.log("event created.");
              });
            };
          })(this));
        });
      });
    });
    it('can Observe Object', function(done) {
      return mojio_client.get(App, {}, function(error, result) {
        var app, instance, _i, _len, _ref;
        (error === null).should.be["true"];
        mojio_client.should.be.an.instanceOf(MojioClient);
        result.Objects.should.be.an.instanceOf(Array);
        _ref = result.Objects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          instance = _ref[_i];
          instance.should.be.an.instanceOf(App);
        }
        app = new App(result.Objects[0]);
        console.log("retreived app");
        return mojio_client.observe(app, null, function(entity) {
          entity.should.be.an.instanceOf(Object);
          console.log("Observed change seen.");
          return mojio_client.unobserve(observer, app, null, null, function(error, result) {
            return done();
          });
        }, function(error, result) {
          app.Description = "Changed";
          console.log("changing app...");
          result.should.be.an.instanceOf(Observer);
          observer = result;
          mojio_client.put(app, function(error, result) {
            (error === null).should.be["true"];
            return console.log("App changed.");
          });
          app.Description = "An Anonymous Application";
          return mojio_client.put(app, function(error, result) {
            (error === null).should.be["true"];
            return console.log("App changed back.");
          });
        });
      });
    });
    return it('can Observe 2 Objects Separately.', function(done) {
      var app, doubleDone;
      app = new App().mock();
      doubleDone = function(which) {
        count[which]++;
        if (count[0] > 1 && count[1] > 1) {
          return done();
        } else if (count[0] > 2 || count[1] > 2) {
          return true.should.be["false"];
        }
      };
      return mojio_client.get(App, {}, function(error, result) {
        var instance, _i, _len, _ref;
        (error === null).should.be["true"];
        mojio_client.should.be.an.instanceOf(MojioClient);
        result.Objects.should.be.an.instanceOf(Array);
        _ref = result.Objects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          instance = _ref[_i];
          instance.should.be.an.instanceOf(App);
        }
        app1 = new App(result.Objects[0]);
        app2 = new App(result.Objects[1]);
        return mojio_client.observe(app2, null, function(entity) {
          entity.should.be.an.instanceOf(Object);
          console.log("observed change app1");
          entity._id.should.be.equal(app2._id);
          return doubleDone(0);
        }, function(error, result) {
          (error === null).should.be["true"];
          result.Status.should.equal("Approved");
          return mojio_client.observe(app1, null, function(entity) {
            entity.should.be.an.instanceOf(Object);
            console.log("observed change app2");
            entity._id.should.be.equal(app1._id);
            return doubleDone(1);
          }, function(error, result) {
            (error === null).should.be["true"];
            result.Status.should.equal("Approved");
            app1.Description = "Changed1";
            return mojio_client.put(app1, function(error, result) {
              (error === null).should.be["true"];
              console.log("updated app1");
              app1.Description = "Default";
              return mojio_client.put(app1, function(error, result) {
                (error === null).should.be["true"];
                app2.Description = "Changed2";
                return mojio_client.put(app2, function(error, result) {
                  (error === null).should.be["true"];
                  console.log("updated app2");
                  app2.Description = "Anonymous Application";
                  return mojio_client.put(app2, function(error, result) {
                    return (error === null).should.be["true"];
                  });
                });
              });
            });
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=observers_test.js.map
