// Generated by CoffeeScript 1.10.0
(function() {
  var MojioClient, Trip, User, Vehicle, assert, async, config, should, testdata;

  MojioClient = require('../../lib/nodejs/MojioClient');

  User = require('../../lib/models/User');

  Vehicle = require('../../lib/models/Vehicle');

  Trip = require('../../lib/models/Trip');

  Vehicle = require('../../lib/models/Vehicle');

  async = require('async');

  config = {
    application: 'bcafb90b-95b5-406f-8d2a-ad2cb7401df6',
    secret: '1e877bcf-3274-4ce9-8a16-7880dff3b3a3',
    hostname: 'api.moj.io',
    version: 'v1',
    port: '443',
    scheme: 'https',
    signalr_port: '80',
    signalr_scheme: 'http',
    live: false
  };

  testdata = {
    username: 'unittest@moj.io',
    password: 'Password007!'
  };

  assert = require('assert');

  testdata = require('./../data/mojio-test-data');

  should = require('should');

  describe('Stuff', function() {
    it('can do stuff', function(done) {
      var mojio_client;
      mojio_client = new MojioClient(config);
      return mojio_client.login(testdata.username, testdata.password, function(error, result) {
        if (error != null) {
          return console.log("Error:" + error);
        } else {
          console.log("Results:" + JSON.stringify(result));
          mojio_client.getCurrentUser(function(error, result) {
            if (error != null) {
              return console.log("Error:" + error);
            } else {
              console.log("Results: User Email:" + result.Email);
              return mojio_client.get(Vehicle, {}, function(error, result) {
                if (error != null) {
                  return console.log("Error:" + error);
                } else {
                  console.log("Results:" + JSON.stringify(result.Data));
                  return mojio_client.query(Trip, {}, function(error, result) {
                    if (error != null) {
                      return console.log("Error:" + error);
                    } else {
                      console.log("Results:" + JSON.stringify(result.Data));
                      return done();
                    }
                  });
                }
              });
            }
          });
          return mojio_client.query(User, {
            criteria: {
              Email: 'unittest@moj.io'
            },
            limit: 10
          }, function(error, result) {
            (error === null).should.be["true"];
            return console.log("Results by criteria:" + JSON.stringify(result.Data));
          });
        }
      });
    });
    return it('can do async stuff', function(done) {
      var mojio_client;
      mojio_client = new MojioClient(config);
      return async.waterfall([
        function(cb) {
          var results;
          results = {};
          return mojio_client.login(testdata.username, testdata.password, function(error, result) {
            if (error != null) {
              console.log("Error:" + error);
            } else {
              console.log("Results:" + JSON.stringify(result));
              results.token = result;
            }
            cb(error, results);
          });
        }, function(results, cb) {
          return mojio_client.getCurrentUser(function(error, result) {
            if (error != null) {
              console.log("Error:" + error);
            } else {
              console.log("Results: User Email:" + result.Email);
              results.user = result;
            }
            cb(error, results);
          });
        }, function(results, cb) {
          return mojio_client.query(User, {
            criteria: {
              Email: 'unittest@moj.io'
            },
            limit: 10
          }, function(error, result) {
            if (error != null) {
              console.log("Error:" + error);
            } else {
              console.log("Results: User Email:" + result.Data[0].Email);
              results.usersByQuery = result.Data;
            }
            return cb(error, results);
          });
        }, function(results, cb) {
          return mojio_client.get(Vehicle, {}, function(error, result) {
            if (error != null) {
              console.log("Error:" + error);
            } else {
              console.log("Results:" + JSON.stringify(result.Data));
              results.vehicles = result.Data;
            }
            return cb(error, results);
          });
        }, function(results, cb) {
          return mojio_client.query(Trip, {}, function(error, result) {
            if (error != null) {
              console.log("Error:" + error);
            } else {
              console.log("Results:" + JSON.stringify(result.Data));
            }
            return cb(error, results);
          });
        }
      ], function(error, results) {
        console.log("Results:" + results);
        return done();
      });
    });
  });

}).call(this);

//# sourceMappingURL=minimum.js.map
