// Generated by CoffeeScript 1.8.0
(function() {
  var App, Event, Mojio, MojioClient, Observer, User, Vehicle, assert, config, count, mojio_client, observer, should, testdata, theevent, user, vehicle;

  MojioClient = require('../../src/nodejs/MojioClient');

  Observer = require('../../src/models/Observer');

  App = require('../../src/models/App');

  Mojio = require('../../src/models/Mojio');

  Vehicle = require('../../src/models/Vehicle');

  Event = require('../../src/models/Event');

  User = require('../../src/models/User');

  config = require('../config/mojio-config.coffee');

  mojio_client = new MojioClient(config);

  assert = require('assert');

  testdata = require('../data/mojio-test-data');

  should = require('should');

  count = [0, 0];

  observer = null;

  theevent = null;

  vehicle = null;

  user = null;

  describe('Observer', function() {
    before(function(done) {
      return mojio_client.login(testdata.username, testdata.password, function(error, result) {
        (error === null).should.be["true"];
        return done();
      });
    });
    return it('Can Conditionally Observe Speed', function(done) {
      user = new User({});
      user.authorization(mojio_client);
      return user.query({}, function(error, result) {
        var instance, mojio, _i, _len, _ref;
        (error === null).should.be["true"];
        mojio_client.should.be.an.instanceOf(MojioClient);
        result.Objects.should.be.an.instanceOf(Array);
        _ref = result.Objects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          instance = _ref[_i];
          instance.should.be.an.instanceOf(User);
        }
        user = result.Objects[0];
        mojio = new Mojio().mock();
        mojio.OwnerId = user.id;
        return mojio_client.post(mojio, function(error, result) {
          (error === null).should.be["true"];
          mojio = new Vehicle(result);
          vehicle = new Vehicle().mock();
          vehicle.MojioId = mojio._id;
          vehicle.OwnerId = user._id;
          vehicle.LastSpeed = 20.0;
          return mojio_client.post(vehicle, function(error, result) {
            (error === null).should.be["true"];
            vehicle = new Vehicle(result);
            console.log("created vehicle" + vehicle);
            observer = new Observer({
              ObserverType: "Speed",
              Status: "Approved",
              SpeedLow: 80.0,
              Name: "Test" + Math.random(),
              Subject: vehicle.model(),
              SubjectId: vehicle.id(),
              "Transports": "SignalR"
            });
            return mojio_client.watch(observer, function(entity) {
              entity.should.be.an.instanceOf(Object);
              console.log("Observed change seen.");
              return mojio_client.unobserve(observer, vehicle, null, null, function(error, result) {
                return mojio_client["delete"](vehicle, function(error, result) {
                  (error === null).should.be["true"];
                  console.log("Vehicle deleted.");
                  return done();
                });
              });
            }, function(error, result) {
              var event;
              result.should.be.an.instanceOf(Observer);
              result.Status.should.equal("Approved");
              vehicle.LastSpeed = 90.0;
              console.log("changing vehicle speed...");
              observer = result;
              event = new Event({});
              event.authorization(mojio_client);
              event.EventType = "TripEvent";
              event.VehicleId = vehicle._id;
              event.MojioId = mojio._id;
              event.Speed = 90.0;
              return mojio_client.post(event, function(error, result) {
                (error === null).should.be["true"];
                return console.log("Event at speed 90.0 added.");
              });
            });
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=conditional_observer_test.js.map
