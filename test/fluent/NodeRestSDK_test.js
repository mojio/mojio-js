// Generated by CoffeeScript 1.9.3
(function() {
  var MojioSDK, async, should;

  MojioSDK = require('../../src/nodejs/MojioSDK');

  should = require('should');

  async = require('async');

  describe('Node Mojio Rest SDK', function() {
    var execute, mojio, sdk, testErrorResult, user, vehicle;
    sdk = new MojioSDK();
    user = null;
    mojio = null;
    vehicle = null;
    testErrorResult = function(error, result) {
      (error === null).should.be["true"];
      return (result !== null).should.be["true"];
    };
    execute = function(test, done) {
      return async.series([
        function(cb) {
          return sdk.authorize({
            type: "token",
            user: "unittest@moj.io",
            password: "mojioRocks"
          }, (function(error, result) {
            vehicle = result;
            return cb(error, result);
          }));
        }, function(cb) {
          return sdk.mock().user({}).callback(function(error, result) {
            user = result;
            return cb(error, result);
          });
        }, function(cb) {
          return sdk.mojio({
            UserId: user.id,
            Imei: "9991234567891234"
          }).mock(function(error, result) {
            mojio = result;
            return cb(error, result);
          });
        }, function(cb) {
          return sdk.mock().vehicle({
            MojioId: mojio.id,
            UserId: user.id,
            Speed: 80
          }, (function(error, result) {
            vehicle = result;
            return cb(error, result);
          }));
        }, function(cb) {
          return test(cb);
        }
      ], function(error, results) {
        if (error != null) {
          console.log(error);
        }
        (result !== null).should.be["true"];
        return done();
      });
    };
    beforeEach(function() {
      user = null;
      mojio = null;
      return vehicle = null;
    });
    it('can create create a vehicle', function(done) {
      this.timeout(5000);
      return execute(function(cb) {
        return sdk.create().vehicle({})["for"](user).callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
      }, done);
    });
    it('can create create a vehicle', function(done) {
      this.timeout(5000);
      return execute(function(cb) {
        return sdk.create().vehicle({})["for"](user, function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
      }, done);
    });
    it('can create share and revoke a vehicle', function(done) {
      this.timeout(5000);
      return execute(function(cb) {
        sdk.share().vehicle(vehicle)["with"](user).access("write").callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
        return sdk.revoke().vehicle(vehicle).from(user).callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
      }, done);
    });
    it('can create share and revoke a list of vehicles', function(done) {
      this.timeout(5000);
      return execute(function(cb) {
        sdk.share().vehicles([vehicle])["with"](user).access("read").callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
        return sdk.revoke().vehicles([vehicle]).from(user).access("read").callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
      }, done);
    });
    it("can create share and revoke a vehicle's fields", function(done) {
      this.timeout(5000);
      return execute(function(cb) {
        sdk.share().vehicle(vehicle).fields(['location', 'speed'])["with"](user).access("read").callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
        return sdk.revoke().vehicle(vehicle).from(user).access("read").callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
      }, done);
    });
    return it('can create group add/remove users', function(done) {
      this.timeout(5000);
      return execute(function(cb) {
        sdk.create().group({
          name: "blah"
        })["with"]([user]).callback(function(error, result) {
          testErrorResult(error, result);
          return function(error, result) {
            var group;
            return group = result;
          };
        });
        sdk.group("blah").add(user).callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
        sdk.add(user).into().group("blah").callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
        sdk.remove(user).outof().group("blah").callback(function(error, result) {
          testErrorResult(error, result);
          return cb(null, result);
        });
        return sdk.create().mojio({
          imei: "123981392131"
        });
      }, done);
    });
  });

}).call(this);

//# sourceMappingURL=NodeRestSDK_test.js.map
